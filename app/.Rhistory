suppressPackageStartupMessages(library(googleVis))
suppressPackageStartupMessages(library(googleVis))
plot(gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400)))
demo(googleVis)
data(Fruits)
data('Fruits')
Fruits
getwd()
rm(list=ls())
getwd()
setwd("~")
getwd()
setwd("Survey Overview/sunanda/")
library(shiny)
runApp('app')
runApp('app')
?rPlot
runApp('app')
runApp('app')
runApp('app')
runApp('app')
survey<-read.delim("~/survey overview/survey_06.csv", header=F, sep="\t", colClasses=c(rep("numeric", 4),"factor","numeric")) #read in survey data
View(survey)
colnames(survey)<-c("survey.id", "user","site.id", "net.id", "answer", "timestamp")
net.surv<-as.data.frame(matrix(NA,nrow=net.count,ncol=5,dimnames=list(NULL,c("net.id","net.name","total.survey","filled.survey","perc_filled"))))
net.unique<-unique(clicks$net.id)
net.count<-length(unique(clicks$net.id))
rm(list=ls())
clicks <- read.delim("~/Survey Overview/clicks_06.csv",header=T, sep="\t") #read in click data
survey <- read.delim("~/survey overview/survey_06.csv", header=F, sep="\t", colClasses=c(rep("numeric", 4),"factor","numeric")) #read in survey data
clicks <- read.delim("~/Survey Overview/sunanda/app/clicks_6.csv",header=T, sep="\t") #read in click data
survey <- read.delim("~/survey overview/survey_06.csv", header=F, sep="\t", colClasses=c(rep("numeric", 4),"factor","numeric")) #read in survey data
net.unique <- unique(clicks$net.id)
net.count <- length(unique(clicks$net.id))
net.surv <- as.data.frame(matrix(NA,nrow=net.count,ncol=5,dimnames=list(NULL,c("net.id","net.name","total.survey","filled.survey","perc_filled"))))
View(net.surv)
$net.id) #identifying the unique networks active at the moment
net.surv$net.name <- unique(clicks$net.name)
net.surv$net.id <- unique(clicks$net.id) #identifying the unique networks active at the moment
View(net.surv)
allnet <- split(survey,survey$net.id)
View(survey)
colnames(survey) <- c("survey.id", "user","site.id", "net.id", "answer", "timestamp")
allnet <- split(survey,survey$net.id)
filled.surv <- as.data.frame(matrix(NA,nrow=length(unique(survey$net.id)),ncol=4,dimnames=list(NULL,c("net.id","total.survey","filled.survey","perc_filled"))))
View(filled.surv)
total.survey <- as.matrix(sapply(allnet,nrow))
filled.surv$total.survey <- total.survey[,1]
filled.surv$filled.survey <- as.data.frame(sapply(allnet,function(x) length(grep("S8",x[,"answer"]))))[,1]
filled.surv$net.id <- rownames(total.survey)
filled.surv$perc_filled <- paste0(round((filled.surv$filled.survey/filled.surv$total.survey)*100,digits=0),"%")
View(filled.surv)
name.list <- names(allnet)
net.surv$total.survey <- apply(as.matrix(match(net.surv$net.id,filled.surv$net.id)),c(1,2),function(x) filled.surv$total.survey[x])
net.surv$filled.survey <- apply(as.matrix(match(net.surv$net.id,filled.surv$net.id)),c(1,2),function(x) filled.surv$filled.survey[x])
net.surv$perc_filled <- apply(as.matrix(match(net.surv$net.id,filled.surv$net.id)),c(1,2),function(x) filled.surv$perc_filled[x])
net.surv$total.survey <- apply(as.matrix(match(net.surv$net.id,filled.surv$net.id)),c(1,2),function(x) filled.surv$total.survey[x])
net.surv$filled.survey <- apply(as.matrix(match(net.surv$net.id,filled.surv$net.id)),c(1,2),function(x) filled.surv$filled.survey[x])
net.surv$perc_filled <- apply(as.matrix(match(net.surv$net.id,filled.surv$net.id)),c(1,2),function(x) filled.surv$perc_filled[x])
net.surv <- net.surv[order(net.surv$net.name),]
View(net.surv)
View(survey)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
setwd("//filer001.office.nugg.ad/sgarg/Statistics Ongoing Projects/Cookie_age/")
de <- c(571289945L,223088769L,1660240041L,1615459509L,2059506885L,1569905102L)
de_i <- unique(de%%16)
#reading in the prediction data for german 6 netowrks stroeer_digital_media,iqdigital,adscale,OMS,IP-Deutschland,ASMI
de_predi <- read.delim("de_predictions.csv",header=F,stringsAsFactors=F,check.names=F)
names(de_predi) <- c("user","net","form_pred","raw_pred")
## function to extract the cookie_age
splitting <- function(x) {
a <- unlist(strsplit(x,";"))
b <- a[grep("history_age",a)]
c <- as.numeric(sub("history_age=","",b))
c
}
de_predi <- transform(de_predi,cookie_age = splitting(raw_pred)) ##creating the cookie age variable
de_predi <- transform(de_predi,deleter = ifelse(de_predi$cookie_age==0,"Cookie Deleter","Not Cookie Deleter")) ##creating the cookie deleter variable
cookie_deleters  <- subset(de_predi,cookie_age == 0)
non_cookie_deleters <- subset(de_predi,cookie_age != 0)
View(cookie_deleters)
split_clicks <- function(x) {
a <- unlist(strsplit(x,";"))
b <- a[grep("click_count",a)]
c <- as.numeric(sub("click_count=","",b))
c
}
de_predi <- transform(de_predi,cookie_age = splitting(raw_pred),
clicks = split_clicks(raw_pred))
View(de_predi)
cookie_deleters  <- subset(de_predi,cookie_age == 0)
non_cookie_deleters <- subset(de_predi,cookie_age != 0)
View(cookie_deleters)
cookie_deleters$raw_pred[1]
unlist(strsplit(cookie_deleters$raw_pred[1],";"))
a <- unlist(strsplit(cookie_deleters$raw_pred[1],";"))
b <- a[grep("click_count="),a]
b <- a[grep("click_count=",a)]
b
b <- a[grep("click_count=",a)]
c <- sub("click_count","",b)
c
c <- sub("click_count=","",b)
c
a <- unlist(strsplit(cookie_deleters$raw_pred[2],";"))
b <- a[grep("click_count=",a)]
b
View(cookie_deleters)
a <- unlist(strsplit(cookie_deleters$raw_pred[3],";"))
a
b <- a[grep("click_count=",a)]
b
a <- unlist(strsplit(cookie_deleters$raw_pred[3],";"))
b <- a[grep("click_count=",a)]
c <- sub("click_count=","",b)
c
b
b[2]
split_clicks <- function(x) {
a <- unlist(strsplit(x,";"))
b <- a[grep("click_count",a)]
c <- as.numeric(sub("click_count=","",b[2]))
c
}
de_predi <- read.delim("de_predictions.csv",header=F,stringsAsFactors=F,check.names=F)
names(de_predi) <- c("user","net","form_pred","raw_pred")
## function to extract the cookie_age
splitting <- function(x) {
a <- unlist(strsplit(x,";"))
b <- a[grep("history_age",a)]
c <- as.numeric(sub("history_age=","",b))
c
}
split_clicks <- function(x) {
a <- unlist(strsplit(x,";"))
b <- a[grep("click_count",a)]
c <- as.numeric(sub("click_count=","",b[2]))
c
}
de_predi <- transform(de_predi,cookie_age = splitting(raw_pred),
clicks = split_clicks(raw_pred)) ##creating the cookie age variable
de_predi <- transform(de_predi,deleter = ifelse(de_predi$cookie_age==0,"Cookie Deleter","Not Cookie Deleter")) ##creating the cookie deleter variable
cookie_deleters  <- subset(de_predi,cookie_age == 0)
non_cookie_deleters <- subset(de_predi,cookie_age != 0)
View(cookie_deleters)
unique(cookie_deleters$clicks)
a <- unlist(strsplit(cookie_deleters$raw_pred[12],";"))
b <- a[grep("click_count=",a)]
b
b[2]
c <- sub("click_count=","",b[2])
c
split_clicks <- function(x) {
a <- unlist(strsplit(x,";"))
b <- a[grep("click_count=",a)]
c <- as.numeric(sub("click_count=","",b[2]))
c
}
de_predi <- transform(de_predi,cookie_age = splitting(raw_pred),
clicks = split_clicks(raw_pred)) ##creating the cookie age variable
de_predi <- transform(de_predi,deleter = ifelse(de_predi$cookie_age==0,"Cookie Deleter","Not Cookie Deleter")) ##creating the cookie deleter variable
cookie_deleters  <- subset(de_predi,cookie_age == 0)
non_cookie_deleters <- subset(de_predi,cookie_age != 0)
View(cookie_deleters)
c
as.numeric(c)
rm(a)
rm(b)
rm(c)
split_clicks <- function(x) {
a <- unlist(strsplit(x,";"))
b <- a[grep("click_count=",a)]
c <- as.numeric(sub("click_count=","",b[2]))
c
}
split_clicks(cookie_deleters$raw_pred[3])
split_clicks(cookie_deleters$raw_pred[12])
de_predi <- transform(de_predi,cookie_age = splitting(raw_pred),
clicks = split_clicks(raw_pred))
de_predi <- transform(de_predi,cookie_age = splitting(raw_pred),
clicks = split_clicks(raw_pred))
View(de_predi)
de_predi <- transform(de_predi,deleter = ifelse(de_predi$cookie_age==0,"Cookie Deleter","Not Cookie Deleter")) ##creating the cookie deleter variable
cookie_deleters  <- subset(de_predi,cookie_age == 0)
non_cookie_deleters <- subset(de_predi,cookie_age != 0)
View(cookie_deleters)
View(cookie_deleters)
clicks <- split_clicks(cookie_deleters$raw_pred)
clicks
clicks <- split_clicks(cookie_deleters$raw_pred)
clicks
split_clicks <- function(x) {
a <- unlist(strsplit(x,";"))
b <- a[grep("click_count",a)]
c <- as.numeric(sub("click_count=","",b[2]))
c
}
clicks <- split_clicks(cookie_deleters$raw_pred)
clicks
clicks <- splitting(cookie_deleters$raw_pred)
clicks
clicks <- splitting(non_cookie_deleters$raw_pred)
clicks
a <- unlist(strsplit(cookie_deleters$raw_pred[12]))
a <- unlist(strsplit(cookie_deleters$raw_pred[12],";"))
a
b <- a[grep("$click_count",a)]
b
b <- a[grep("^click_count",a)]
b
split_clicks <- function(x) {
a <- unlist(strsplit(x,";"))
b <- a[grep("^click_count",a)]
c <- as.numeric(sub("click_count=","",b[2]))
c
}
rm(a)
rm(b)
rm(c)
clicks <- split_clicks(cookie_deleters$raw_pred)
clicks
split_clicks <- function(x) {
a <- unlist(strsplit(x,";"))
b <- a[grep("^click_count",a)]
c <- as.numeric(sub("click_count=","",b))
c
}
clicks <- split_clicks(cookie_deleters$raw_pred)
clicks
de_predi <- transform(de_predi,cookie_age = splitting(raw_pred),
clicks = split_clicks(raw_pred)) ##creating the cookie age variable
de_predi <- transform(de_predi,deleter = ifelse(de_predi$cookie_age==0,"Cookie Deleter","Not Cookie Deleter")) ##creating the cookie deleter variable
cookie_deleters  <- subset(de_predi,cookie_age == 0)
non_cookie_deleters <- subset(de_predi,cookie_age != 0)
View(cookie_deleters)
hist(cookie_deleters$clicks)
hist(cookie_deleters$clicks,breaks=1)
hist(cookie_deleters$clicks,xlim=c(0,100))
cookie_deleters$clicks
hist(cookie_deleters$clicks)
range(cookie_deleters$clicks)
hist(non_cookie_deleters$cookie_age,breaks=20,ylim=c(1,5),main="How Old is the Cookie?")
hist(cookie_deleters$clicks,xlim=c(0,100))
hist(cookie_deleters$clicks,xlim=c(765))
hist(cookie_deleters$clicks,xlim=c(0,765))
hist(cookie_deleters$clicks,xlim=c(1,765))
hist(cookie_deleters$clicks,xlim=c(2,765))
table(cookie_deleters$clicks)
plot(cookie_deleters$clicks,xlim=c(2,765))
boxplot(cookie_deleters$clicks)
View(cookie_deleters)
35215-30339
4876/35215
rm(list=ls())
install.packages("countries.rds")
require(countries.rds)
install.packages("UScensus2010")
require(UScensus2010)
data(countries.rds)
data(countries)
setwd("~")
getwd()
countries <- readRDS("census-app//data//counties.rds")
head(countries)
install.packages(c("maps", "mapproj"))
shades <- colorRampPalettete(c("white", color))(100)
library(maps)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
library(maps)
colorRampPalette(c("white","green"))(100)
percent_map(counties$white, "pink", "% white")
percent_map(counties$white, "orange", "% white")
pmax(1,2)
View(countries)
as.integer(cut(77.2, 100, include.lowest = TRUE, ordered = TRUE))
cut(x=77,breaks=100,include.lowest=T,ordered=T)
as.integer(cut(x=77,breaks=100,include.lowest=T,ordered=T))
shades <- colorRampPalettete(c("white", green))(100)
libary(maps)
library(maps)
shades <- colorRampPalettete(c("white", green))(100)
shades <- colorRampPalette(c("white", green))(100)
shades <- colorRampPalette(c("white", 'green'))(100)
var <- pmax(65, 0)
var <- pmin(65r, 100)
var <- pmin(65, 100)
var
percents <- as.integer(cut(var, 100,
include.lowest = TRUE, ordered = TRUE))
percents
fills <- shades[percents]
fills
source("census-app/helpers.R")
rm(list=ls())
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "orange", "% white")
percent_map(counties$white, "grey", "% white")
percent_map(counties$white, "darkgrey", "% white")
percent_map(counties$white, "yellow", "% white")
run('census-app')
runApp('census-app')
library(installr)
sessionInfo()
devtools::install_github(c("yihui/knitr", "rstudio/shiny"))
setwd
library(Shiny)
library(shiny)
runApp("Survey Overview/sunanda/app")
runApp("Survey Overview/sunanda/app")
View(results)
require(devtools)
install_github('rCharts','ramnathv')
names(iris)
rm(list=ls())
names(iris) = gsub("\\.","",names(iris))
library(rCharts)
rPlot(SepalLength ~ SepalWidth|Species, data = iris , color = "Species",type = 'point')
n1 <- rPlot(SepalLength ~ SepalWidth|Species, data = iris , color = "Species",type = 'point')
n1$html
n1$html_assets
n1$print
n1
runApp("Survey Overview/sunanda/app")
runApp("Survey Overview/sunanda/app")
runApp("Survey Overview/sunanda/app")
rm(iris)
rm(ni)
rm(n1)
runApp("Survey Overview/sunanda/app")
runApp("Survey Overview/sunanda/app")
library(shiny)
runApp("Survey Overview/sunanda/app")
runApp("Survey Overview/sunanda/app")
runApp("Survey Overview/sunanda/app")
runApp("Survey Overview/sunanda/app")
runApp("Survey Overview/sunanda/app")
runApp("Survey Overview/sunanda/app")
runApp("Survey Overview/sunanda/app",mode = 'showcase')
runApp("Survey Overview/sunanda/app",display.mode = 'showcase')
View(agg_surveys_net)
runApp("Survey Overview/sunanda/app",display.mode = 'showcase')
runApp("Survey Overview/sunanda/app",display.mode = 'showcase')
library(shiny)
runApp("Survey Overview/sunanda/app/")
runApp("Survey Overview/sunanda/app")
networks <- unique(order(agg_traffic$net.name))
head(networks)
networks <- unique(agg_traffic$net.name)
head(networks)
?order
networks <- unique(sort.list(agg_traffic$net.name))
head(networks)
require(dplyr)
networks <- unique(arrange(agg_traffic$net.name))
networks <- unique(agg_traffic$net.name[order(agg_traffic$net.name)])
head(networks)
site_choice <- unique(results[results$net.name == input$network,"site.name"])
runApp("Survey Overview/sunanda/app")
runApp("Survey Overview/sunanda/app")
runApp("Survey Overview/sunanda/app",display.mode = 'showcase')
library(shiny)
h1("shiny")
p("gjdjdgjdgkdjgdjldg")
runApp("Survey Overview/sunanda/app",display.mode = 'showcase')
runExample("06_tabsets")
runApp("Survey Overview/sunanda/app",display.mode = 'showcase')
runApp("Survey Overview/sunanda/app",display.mode = 'showcase')
runApp("Survey Overview/sunanda/app",display.mode = 'showcase')
runApp("Survey Overview/sunanda/app",display.mode = 'showcase')
runExample("06_tabsets")
runApp("Survey Overview/sunanda/app",display.mode = 'showcase')
runExample("10_tabsets")
runExample("10_download")
runApp("Survey Overview/sunanda/app",display.mode = 'showcase')
runApp("Survey Overview/sunanda/app",display.mode = 'showcase')
View(agg_traffic)
runApp("Survey Overview/sunanda/app",display.mode = 'showcase')
runApp("Survey Overview/sunanda/app",display.mode = 'showcase')
runApp("Survey Overview/sunanda/app")
runExample("10_download")
runApp("Survey Overview/sunanda/app",display.mode = 'showcase')
runApp("Survey Overview/sunanda/app",display.mode = 'showcase')
runApp("Survey Overview/sunanda/app",display.mode = 'showcase')
runApp("Survey Overview/sunanda/app",display.mode = 'showcase')
runExample("10_download")
library(shiny)
runExample("10_download")
runApp("Survey Overview/sunanda/app")
r(list=ls())
r(list=ls())
rm(list=ls())
setwd("Survey Overview//sunanda/app/")
##clicks data
x <- 5:8  ## give the week subscripts
y <- paste0("Week_",x) ## creating the week vector
inputs <- vector("list",4)  #empty list for the loop
##adding the week stamp in each data set
for( i in seq_along(x)) {
inputs[[i]] <- read.delim(paste0("clicks_",x[i],".csv"),header=T, stringsAsFactors=F)
inputs[[i]] <- cbind(inputs[[i]], week = rep(y[i],nrow(inputs[[i]])))
}
results <- do.call("rbind",inputs) ##putting together the results
results$week <- as.character(results$week)
results$one.clicks <- NULL
##reshaping the data to long format for a stack chart
require(reshape2)
mltd_results <- melt(data = results,id.vars = c( "net.name","net.id","site.name","site.id","week"),value.name = 'Traffic')
require(dplyr)
grouped <- group_by(results,week,net.id,net.name)
##aggregate by sites
agg_traffic <- summarise(grouped,
pi = sum(pi),
uc = sum(uc),
qc = sum(qc))
mltd_traffic_net <- melt(agg_traffic,id.vars = c("week","net.id","net.name"),value.name = 'Traffic')
networks <- unique(agg_traffic$net.name[order(agg_traffic$net.name)])
# Survey Part -------------------------------------------------------------
## data
survey <- read.delim("survey.csv",header=F,stringsAsFactors=F)
##col names
names(survey) <- c("survey.id", "user","site.id", "net.id", "answer", "timestamp")
##making a variable for the completed surveys
splitting <- function(x) {
r = regexpr("S8",x)
result = substr(x,r,r+1)
result
}
survey <- transform(survey, completed = splitting(answer))
survey$completed <- ifelse(survey$completed == "S8",1,0)
## grouping the survey data by net & counting the completed surveys
grouped_net <- group_by(survey,net.id)
agg_surveys_net <- summarise(grouped_net,
surveys = n(),
compl_sur = sum(completed))
##grouping the survey data by site
grouped_site <- group_by(survey,net.id,site.id)
agg_surveys_site <- summarise(grouped_site,
surveys = n(),
compl_sur = sum(completed))
View(mltd_traffic_net)
View(survey)
as.POSIXlt(x = survey$timestamp[1],origin = "1970-01-01")
as.POSIXlt(x = survey$timestamp[1],origin = "1970-01-01")
as.POSIXlt(x = survey$timestamp[1],origin = "1970-01-01")
?as.POSIXlt
test <- as.POSIXlt(x = survey$timestamp[1],origin = "1970-01-01")
str(test)
weekdays.POSIXt(test)
weekdays(test)
install.packages(ISOWeek)
install.packages(ISOWeek)''
install.packages('ISOWeek')
install.packages('ISOweek')
require(ISOweek)
ISOweek(test)
ISOweek
thursday0(test)
?thursday0
thursday0
thursday0
require(ISOweek)
?thursday0
test
strptime
?strptime
strptime(test,format = "%V")
strptime(test,format = "%W")
test
strptime(test,format = "%Wu")
strptime(test,format = "%u")
strptime(survey$timestamp[1],format = "%u")
strptime(survey$timestamp[1],format = "%w")
strptime(survey$timestamp[1],format = "%U")
wday <- function(x) as.POSIXlt(x)$wday
wday(test)
wday <- function(x) as.POSIXlt(x)$
wday <- function(x) as.POSIXlt(x)$
?strftime
strptime(test,format = "%Wu")
strptime(test,format = "%e")
strptime(test,format = "%W")
strptime(test,format = "%H")
test
survey$timestamp[1]
strptime(survey$timestamp[1],"%W")
ISOweek(tst)
ISOweek(test)
test <- ISOweek(test)
str(test)
ISOweek(survey$timestamp[1:10])
ISOweek(as.POSIXlt(survey$timestamp[1:10],origin = "1970-01-01"))
test <- ISOweek(as.POSIXlt(survey$timestamp,origin = "1970-01-01"))
unique(test)
test
substr(x = test,6,8)
substr(x = test,7,8)
